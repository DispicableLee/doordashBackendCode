const express = require("express");
const router = express.Router();
const Restaurant = require("../../models/Restaurant");
const Order = require("../../models/Order");
const Item = require("../../models/Item");
const Menu = require("../../models/Menu");

var ObjectID = require("mongodb").ObjectId;


router.post("/signup/restaurant", async (req, res) => {
    // execute code here
    const restaurant = await Restaurant.findOne({email: req.body.email})
    if(restaurant){
        return res.status(400).send({})
    } else{
        const newRestaurant = new Restaurant(req.body)
        newRestaurant.save().catch(err=>console.log(err))
        return res.status(200).send(newRestaurant);
    }
});

router.get("/search/restaurant/:email", async (req, res)=>{
    //http://localhost:5000/api/v1/dashboard/search/restaurant/peter@gmail.com
    const userEmail = req.params.email;
    const foundRestaurant = await Restaurant.findOne({email:userEmail})
    if(foundRestaurant){
        return res.status(200).send(foundRestaurant)
    }else{
        return res.status(404).send({})
    }
})

// http://localhost:4000/api/v1/dashboard/search/restaurants/all
router.get("/search/restaurants/all", async (req,res)=>{
    console.log("hitting the /search/restaurant/all endpoint");
    const restaurantList = await Restaurant.find();
    console.log(restaurantList);
    return res.status(200).send(restaurantList);
})

router.post("/add/restaurant/menu/new", async (req,res)=>{
    const restaurantId = req.body.restaurant_id;
    const restaurantObjectId = ObjectID(restaurantId);
    const restaurant = await Restaurant.findById(restaurantObjectId);
    if(restaurant){
        const menu = await Menu.findOne({menu_name:req.body.menu_name, restaurant_id: req.body.restaurant_id});
        if(menu){
            return res.status(404).send({})
        }else{
            const newMenu = new Menu(req.body) // therefore you have a new autogenerated _id
            // we need to update the restaurant document 
            // you need to create a query : specify which restaurant you want to update on the database
            // you need an updated values json to tell the database replace with these new values 
            var updatedMenusList = restaurant.menus; // []
            updatedMenusList.push(newMenu._id); // [1]
            var restaurantQuery = {_id : restaurantObjectId};
            var restaurantUpdatedValues = {
                restaurant_name: restaurant.restaurant_name,
                menus: updatedMenusList,
                email: restaurant.email,
                about_description: restaurant.about_description,
                wait_time: restaurant.wait_time,
                availability: restaurant.availability
            }
            await Restaurant.findOneAndUpdate(restaurantQuery, restaurantUpdatedValues)
            newMenu.save().catch(err=>console.log(err))
            return res.status(200).send(newMenu);
        }
    } else{
        return res.status(404).send({})
    }
})

router.get("/search/restaurant/:restaurantid/:menuid", async (req,res)=>{
    //specify which restaurant we want to find
    const restaurantId = req.params.restaurantid;
    const restuarantObjectId = ObjectID(restaurantId);
    const restaurant = await Restaurant.findById(restuarantObjectId);
    //if the restaurant exists, find the menu
    if(restaurant){
        //specify the menu you want to retrieve
        const menuId = req.params.menuid;
        const menuObjectId = ObjectID(menuId);
        const menu = await Menu.findById(menuObjectId);
        //if the menu exists, send it back
        if(menu){
            return res.status(200).send(menu);
        }else{
            return res.status(400).send({});
        }
    }else{
        return res.status(400).send({})
    }
    //specify which menu we want to find
})

router.put("/update/menu/:menuid", async(req,res)=>{
    const restaurantId = req.body.restaurant_id;
    const restuarantObjectId = ObjectID(restaurantId);
    const restaurant = await Restaurant.findById(restuarantObjectId);
    if(restaurant){
        const menuId = req.params.menuid;
        const menuObjectId = ObjectID(menuId);
        const menu = await Menu.findById(menuObjectId);
        if(menu){
            var menuQuery = {_id : menuObjectId};
            var menuUpdatedValues = {
                menu_name: req.body.menu_name,
                restaurant_id: req.body.restaurant_id,
                items: req.body.items
            }
            await Menu.findOneAndUpdate(menuQuery, menuUpdatedValues)
            return res.status(200).send(menuUpdatedValues);
        }else{
            return res.status(400).send({})
        }
    }else{
        return res.status(400).send({})
    }
})

// delete a menu
// check out any data schemas that have some sort of linking relationship with menu

// step 5: once you havw restaurant document, access the menus array and search for the id of the
// deleted menu id and remove that id from the menus arrays
// step 6:once you remove, do a findOneAndUpdate on the Restaurant 
// step 7: return res status 200 with the deleted menu to send back

router.delete("/delete/menu/:menuid", async(req,res)=>{
    const menuId = req.params.menuid;
    const menuObjectId = ObjectID(menuId);
    const deletedMenu = await Menu.findOneAndDelete({_id : menuObjectId})

    const restaurantId = deletedMenu.restaurant_id
    const restaurantObjectId = ObjectID(restaurantId)
    const restaurant = await Restaurant.findById(restaurantObjectId)
    const restaurantMenus = restaurant.menus;
    const deletedMenuId = deletedMenu._id; // 2

    // menus: [1,2,3,4]
    // deletedMenuId = 2
    var newMenuArray = [];
    for (var i = 0; i < restaurantMenus.length; i++) {
        if (!(restaurantMenus[i].equals(deletedMenuId))) {
            newMenuArray.push(restaurantMenus[i]);
        }
    }
    var restaurantQuery = {_id : restaurantObjectId};
    var updatedValues = {
        restaurant_name: restaurant.restaurant_name,
        menus: newMenuArray,
        email: restaurant.email,
        about_description: restaurant.about_description,
        wait_time: restaurant.wait_time,
        availability: restaurant.availability
    }
    await Restaurant.findOneAndUpdate(restaurantQuery, updatedValues)
    return res.status(200).send(deletedMenu);
})


router.delete("/delete/restaurant/:restaurantid", async(req,res)=>{
    const restaurantID = req.params.restaurantid;
    const restaurantObjectID = ObjectID(restaurantID);
    const restaurant = await Restaurant.findOneAndDelete(restaurantObjectID)
    if(restaurant){
        return res.status(200).send(restaurant);
    }else{
        return res.status(400).send({});
    }
})

router.get("/search/menus/:restaurantid", async(req,res)=>{
    console.log("helooo")
    const restaurantID = req.params.restaurantid;
    const restaurantObjectID = ObjectID(restaurantID);
    const restaurant = await Restaurant.findById(restaurantObjectID)
    if(restaurant){
        const restaurantMenus = restaurant.menus;
        var fullArray = []
        for(var i=0;i<=restaurantMenus.length;i++){
            var menuObjectId = ObjectID(restaurantMenus[i]);
            var menu = await Menu.findById(menuObjectId);
            fullArray.unshift(menu);
        }
        return res.status(200).send(fullArray)

    }else{
        return res.status(400).send({})
    }
})

router.get("/search/v2/menus/:restaurantId", async (req, res) => {
    const restaurantId = req.params.restaurantId;
    const menuList = await Menu.find({restaurant_id: restaurantId})
    return res.status(200).send(menuList)
})

router.post("/add/item/:restaurantid/:menuid", async (req,res)=>{
    const restaurantID = req.params.restaurantid;
    const restaurantObjectID = ObjectID(restaurantID);
    const restaurant = await Restaurant.findById(restaurantObjectID);
    if(restaurant){
        const menuID = req.params.menuid;
        const menuObjectId = ObjectID(menuID);
        const menu = await Menu.findById(menuObjectId)
        if(menu){
            const newItem = new Item(req.body)

            var menuQuery = {_id : menuObjectId};
            var updatedMenuList = menu.items;
            updatedMenuList.push(newItem._id)
            var updatedValues = {
                menu_name: menu.menu_name,
                restaurant_id: menu.restaurant_id,
                items: updatedMenuList
            }
            
            await Menu.findOneAndUpdate(menuQuery, updatedValues);
            newItem.save().catch(err=>console.log(err))
            return res.status(200).send(newItem);

        }else{
            return res.status(400).send({})
        }

    }else {
        return res.status(400).send({})
    }

})
router.post("/add/order/:restaurantid", async(req,res)=>{
    const resId = req.params.restaurantid;
    const restaurantObjectID = ObjectID(resId);
    const restaurant = await Restaurant.findById(restaurantObjectID);
    if(restaurant){
        const newOrder = new Order(req.body)
        newOrder.save().catch(err=>console.log(err));
        return res.status(200).send(newOrder);
    }else{
        return res.status(404).send({});
    }
})


//next class new put request
//.then new orders
router.put("/edit/restaurants/orders/:orderid", async (req,res)=>{
    console.log("i reached here");
    const orderId = req.params.orderid
    const orderObjectID = ObjectID(orderId)
    const order = await Order.findById(orderObjectID)
    if(order){
        var updatedValues = {
            customer_phone_number: req.body.customer_phone_number, // “562-922-2687”
            customer_email: req.body.customer_email, // “peter@hackercrunch.com”
            items: req.body.items,
            restaurant_id: req.body.restaurant_id,
            total_itemized_cost: req.body.total_itemized_cost,
            tax_cost: req.body.tax_cost,
            total_cost: req.body.total_cost,
            pick_up_time: req.body.pick_up_time
            
        }
        const updatedOrder = await Order.findOneAndUpdate(order, updatedValues);
        return res.status(200).send(updatedValues);
    }else{
        return res.status(400).send({})
    }
})

router.delete("/delete/restaurant/orders/:orderid", async(req,res)=>{
    console.log("this is supposed to delete things");
    const orderID = req.params.orderid;
    const orderObjectID = ObjectID(orderID);
    const order = await Order.findByIdAndDelete(orderObjectID);
    if(order){
        return res.status(200).send(order);
    }else{
        return res.status(404).send({});
    }
});

router.get("/search/all/orders/:customeremail", async(req,res)=>{
    const customerEmail = req.params.customeremail;
    const orders = await Order.find({customer_email :customerEmail});
    if(orders){
        return res.status(200).send(orders)
    }else{
        return res.status(400).send({})
    }
})

router.get("/search/restaurants/ratings", async (req,res) => {
    const restaurantList = await Restaurant.find({rating: {$gte: 4.0}});
    if (restaurantList.length > 0) {
        return res.status(200).send(restaurantList)
    } else {
        return res.status(404).send({});
    }
})

//.then new stuff

module.exports = router;



//MONGOOSE CALLS
